{"pageProps":{"source":{"compiledSource":"var m=Object.defineProperty,c=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var s=(a,t,i)=>t in a?m(a,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):a[t]=i,e=(a,t)=>{for(var i in t||(t={}))r.call(t,i)&&s(a,i,t[i]);if(n)for(var i of n(t))d.call(t,i)&&s(a,i,t[i]);return a},l=(a,t)=>c(a,h(t));var p=(a,t)=>{var i={};for(var o in a)r.call(a,o)&&t.indexOf(o)<0&&(i[o]=a[o]);if(a!=null&&n)for(var o of n(a))t.indexOf(o)<0&&d.call(a,o)&&(i[o]=a[o]);return i};const makeShortcode=a=>function(i){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},i))},Alert=makeShortcode(\"Alert\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var o=i,{components:a}=o,t=p(o,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),t),{components:a,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Accessing the NCCID data\"),mdx(\"p\",null,\"The data is stored in \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://aws.amazon.com/s3/\"}),`Amazon Web Services\nS3`),`. Once your organisation has been granted\naccess, NHSX will send AWS credentials by encrypted email. The\ncredentials will allow accessing the data.`),mdx(\"p\",null,\"We recommend accessing the data using the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://aws.amazon.com/cli/\"}),`Amazon Web Services Command\nLine Interface (AWS CLI)`),`, or client\nlibraries that interact with S3 such as\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html\"}),\"Boto3\"),`.\nSome examples are provided below.`),mdx(\"h2\",null,\"Warehouse structure\"),mdx(\"p\",null,\"The warehouse data is stored in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"nccid-data-warehouse-prod\"),` S3\nbucket, and access is granted to different\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys\"}),\"prefixes\"),\".\"),mdx(\"p\",null,`The warehouse training data is organised into prefixes within the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"training\"),` prefix, based on image types (or \"modality\"), patient ID,\nand date as follows:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`# CT images & metadata\ntraining/ct/PATIENT_ID/STUDY_UID/SERIES_UID/IMAGE_UUID.dcm\ntraining/ct-metadata/PATIENT_ID/STUDY_UID/SERIES_UID/IMAGE_UUID.json\n\n# MRI images & metadata\ntraining/mri/PATIENT_ID/STUDY_UID/SERIES_UID/IMAGE_UUID.dcm\ntraining/mri-metadata/PATIENT_ID/STUDY_UID/SERIES_UID/IMAGE_UUID.json\n\n# X-ray images & metadata\ntraining/xray/PATIENT_ID/STUDY_UID/SERIES_UID/IMAGE_UUID.dcm\ntraining/xray-metadata/PATIENT_ID/STUDY_UID/SERIES_UID/IMAGE_UUID.json\n\n# Patient clinical data\ntraining/data/PATIENT_ID/status_DATE.json\ntraining/data/PATIENT_ID/data_DATE.json\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"ct\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"mri\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"xray\"),` folders hold the\n`,mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.dicomstandard.org/\"}),\"DICOM\"),\" images of the given kind.\"),mdx(\"li\",{parentName:\"ul\"},\"The de-identified \",mdx(\"inlineCode\",{parentName:\"li\"},\"Patient_ID\"),` value is equivalent to the\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"(0010,0020)\"),` DICOM\n`,mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.dicomlibrary.com/dicom/dicom-tags/\"}),\"tag\"),` from the\nimages and `,mdx(\"inlineCode\",{parentName:\"li\"},\"Pseudonym\"),\" field from the \",mdx(\"inlineCode\",{parentName:\"li\"},\"status_DATE.json\"),` and\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"data_DATE.json\"),\" clinical data files.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"STUDY_UID\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"SERIES_UID\"),\" are equivalent to the \",mdx(\"inlineCode\",{parentName:\"li\"},\"(0020,000D)\"),` and\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"(0020,000E)\"),\" DICOM tags in the given images.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"...-metadata\"),` folders hold the DICOM tags exported as JSON from\nthe corresponding image file `,mdx(\"inlineCode\",{parentName:\"li\"},\"IMAGE_UUID.dcm\"),\" into \",mdx(\"inlineCode\",{parentName:\"li\"},\"IMAGE_UUID.json\"),`\nto enable quick parsing without the need to download the given image`),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"data\"),\" folder holds the patient medical data, \",mdx(\"inlineCode\",{parentName:\"li\"},\"status_DATE.json\"),`\nfiles for negative results, and `,mdx(\"inlineCode\",{parentName:\"li\"},\"data_DATE.json\"),` file/files for\npositive results. `,mdx(\"inlineCode\",{parentName:\"li\"},\"DATE\"),\" is formatted as \",mdx(\"inlineCode\",{parentName:\"li\"},\"YYYY-MM-DD\"),`, for example\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"2020-04-21\"),\".\")),mdx(Alert,{title:\"Data Delay\",mdxType:\"Alert\"},\"Over time there will be more data added to the warehouse, and they will show up as new patient folders, and new image folders with new images. We expect new data will be made available approximately twice a week.\"),mdx(\"h2\",null,\"Using the AWS Command Line Interface\"),mdx(\"p\",null,\"The simplest way to retrieve the imaging data is using the AWS CLI:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`$ aws s3 sync s3://nccid-data-warehouse-prod/training/ct ct\ndownload: s3://nccid-data-warehouse-prod/training/ct/Covid1/1.2.3/A.B.C/x.y.z.dcm to ct/Covid1/1.2.3/A.B.C/x.y.z.dcm\n...\n`)),mdx(\"p\",null,`Repeating this for all the relevant directories you would download the\nlatest data and images that you don't have locally:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`# Remove items from this array that you don't want to download\nmodalities=(\"data\" \"ct\" \"ct-metadata\" \"mri\" \"mri-metadata\" \"xray\" \"xray-metadata\")\nfor modality in \\${modalities[@]}; do\naws s3 sync \"s3://nccid-data-warehouse-prod/training/\\${modality}\" \"\\${modality}\"\ndone\n`)),mdx(\"p\",null,\"In the above example \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.gnu.org/software/bash/manual/html_node/Arrays.html\"}),`Bash\narrays`),`\nwere used (the `,mdx(\"inlineCode\",{parentName:\"p\"},\"modalities\"),\" variable).\"),mdx(\"p\",null,\"For more information check the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.aws.amazon.com/cli/index.html\"}),`AWS CLI\ndocumentation`),`. If you\nencounter any problems, open an issue on our `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/nhsx/covid-chest-imaging-database/issues\"}),`GitHub\nrepository`),\".\"),mdx(\"h2\",null,\"Using Python and Boto3\"),mdx(\"p\",null,`If you are scripting access to files, we recommend using Python and\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html\"}),\"Boto3\"),\".\"),mdx(\"p\",null,\"For more information check the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html\"}),`Boto3\ndocumentation`),`.\nIf you encounter any problems, open an issue on our `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/nhsx/covid-chest-imaging-database/issues\"}),`GitHub\nrepository`),\".\"),mdx(\"p\",null,`Below you may find examples of accessing the data in various ways with\nPython and Boto3.`),mdx(\"h3\",null,\"Listing files\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),`import boto3\n\ns3 = boto3.resource(\"s3\")\nbucket = s3.Bucket(name=\"nccid-data-warehouse-prod\")\n\n# List the objects at a given prefix\nfor obj in bucket.objects.filter(Prefix=\"training/data\"):\n   print(f\"{obj.key}\\\\t{obj.size}\\\\t{obj.last_modified}\")\n`)),mdx(\"p\",null,\"This will result in a list such as:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),`training/data/Covid1/data_2020-05-14.json       1416    2020-05-22 13:38:30+00:00\ntraining/data/Covid6/data_2020-05-15.json       1560    2020-05-22 13:38:31+00:00\n....\n`)),mdx(\"h3\",null,\"Downloading image files\"),mdx(\"p\",null,\"To download files using Boto3, if you don't have them locally already:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),`import os\nimport boto3\n\nBUCKET_NAME = \"nccid-data-warehouse-prod\"\n\ndef downloadPrefixFromS3(bucketName, prefix):\n   \"\"\"This function takes a remote S3 bucket and a prefix,\n   and downloads all the objects from there, that are not\n   already stored locally.\n   \"\"\"\n   s3 = boto3.resource(\"s3\")\n   bucket = s3.Bucket(name=bucketName)\n   for obj in bucket.objects.filter(Prefix=prefix):\n      key = obj.key\n      if os.path.exists(key) and os.stat(key).st_size == obj.size:\n            # If the file exists and it's the right size, we should be done\n            print(f\"{key}: already have locally\")\n            continue\n      if not os.path.exists(os.path.dirname(key)):\n            os.makedirs(os.path.dirname(key))\n      print(f\"{key}: downloading\")\n      bucket.download_file(key, key)\n\n# Download a specific prefix. Don't forget the final \"/\" to limit to the exact prefix\ndownloadPrefixFromS3(BUCKET_NAME, \"training/mri/\")\n`)),mdx(\"p\",null,`The above code will create the folders corresponding to the remote\nprefixes in the current working directory as needed, and only download\nfiles that are not yet downloaded (similar to `,mdx(\"inlineCode\",{parentName:\"p\"},\"aws s3 sync\"),\".\"),mdx(\"h3\",null,\"Opening image files\"),mdx(\"p\",null,`You can also access a remote DICOM image, download into memory and open\nit with, for example with the `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pydicom/pydicom\"}),`PyDICOM\nlibrary`),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),`from io import BytesIO\n\nimport boto3\nimport pydicom\n\ns3 = boto3.resource(\"s3\")\nbucket = s3.Bucket(name=\"nccid-data-warehouse-staging\")\n\nimage_name = \"training/xray/Covid1/1.2.3/A.B.C/x.y.z.dcm\"\n\nwith BytesIO() as tmp:\n   print(f\"Downloading: {image_name}\")\n   bucket.Object(key=image_name).download_fileobj(tmp)\n   tmp.seek(0)\n   # Do not read the image only the metadata here.\n   # To also read the image, remove set stop_before_pixels to False\n   image_data = pydicom.dcmread(tmp, stop_before_pixels=True)\n   print(image_data)\n`)),mdx(\"p\",null,\"This code would result in an output such as:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`Downloading: training/xray/Covid1/1.2.3/A.B.C/x.y.z.dcm\n(0008, 0005) Specific Character Set              CS: 'ISO_IR 100'\n(0008, 0008) Image Type                          CS: ['ORIGINAL', 'PRIMARY', '', 'RT', '', '', '', '', '150000']\n(0008, 0016) SOP Class UID                       UI: Digital X-Ray Image Storage - For Presentation\n...\n`)),mdx(\"h3\",null,\"Loading a JSON file\"),mdx(\"p\",null,`Similarly to the image download above, JSON files can also be directly\naccessed, using the `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.python.org/3/library/json.html\"}),`built in Python json\nlibrary`),\" such as:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),`import json\nfrom io import BytesIO\n\nimport boto3\n\ns3 = boto3.resource(\"s3\")\nbucket = s3.Bucket(name=\"nccid-data-warehouse-prod\")\n\njson_name = \"training/data/Covid1/data_2020-05-14.json\n\nwith BytesIO() as tmp:\n   print(f\"Downloading: {json_name}\")\n   bucket.Object(key=json_name).download_fileobj(tmp)\n   tmp.seek(0)\n   json_data = json.load(tmp)\n   print(json.dumps(json_data, indent=4, sort_keys=True))\n`)),mdx(\"p\",null,\"The output of the above code would be similar to this:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`Downloading: training/data/Covid1/data_2020-05-14.json\n{\n   \"Pseudonym\": \"Covid1\",\n   ...\n}\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Accessing the NCCID data","summary":"The data is stored in Amazon Web Services S3.  Once your organisation has been granted access, NHSX will send AWS credentials by encrypted email.  The credentials will allow accessing the data.","category":"Technical Documentation"}},"meta":{"title":"Accessing the NCCID data","summary":"The data is stored in Amazon Web Services S3.  Once your organisation has been granted access, NHSX will send AWS credentials by encrypted email.  The credentials will allow accessing the data.","category":"Technical Documentation"}},"__N_SSG":true}